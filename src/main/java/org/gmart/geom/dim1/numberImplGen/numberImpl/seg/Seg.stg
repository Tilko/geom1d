delimiters "$", "$"


fileGen(common, boxed, raw, capRaw, typePrefix, specificPart, speImports) ::= <<

/*******************************************************************************
 * Copyright 2020 GrÃ©goire Martinetti
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package $common.packageName$;
import javax.annotation.processing.Generated;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.IntConsumer;
import java.util.stream.Stream;
import java.util.stream.Stream.Builder;

import api_global.geom.dim1.$raw$Impl.$typePrefix$Lengthy;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$Bounds;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$PointSeg;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$SegFrom0;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$Segment;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$UnitSeg;
import lombok.AllArgsConstructor;
import lombok.Getter;
$speImports$

@Generated("$common.generatorFQName$")
public interface $typePrefix$Seg extends $typePrefix$Lengthy {
	//////////////////////////////////////////////////////////////
	///General interface://///////////////////////////////////////
	//////////////////////////////////////////////////////////////
	$raw$ beg();
	default $raw$ len() {
		return end() - beg();
	}
	default $raw$ end() {
		return beg() + len();
	}

	public final static $typePrefix$Seg origin = new $typePrefix$Seg() {
		@Override
		public $raw$ beg() {
			return 0;
		}
		@Override
		public $raw$ len() {
			return 0;
		}
		@Override
		public $raw$ end() {
			return 0;
		}
	};	
	public static Optional<$typePrefix$Seg> getEmptySeg(){
		return Optional.empty();
	}
	/** 
	 * use Bounds::of instead
	 * @param beg
	 * @param end
	 * @return
	 */
	@Deprecated 
	public static  $typePrefix$Seg bounds($raw$ beg, $raw$ end) {
		return new $typePrefix$Bounds(beg, end);
	}
	public static $typePrefix$Seg of($raw$ beg, $raw$ len) {
		return new $typePrefix$Segment(beg, len);
	}
	public static $typePrefix$Seg unit($raw$ beg) {
		return new $typePrefix$UnitSeg(beg);
	}
	public static $typePrefix$Seg point($raw$ position) {
		return new $typePrefix$PointSeg(position);
	}
	public static $typePrefix$Seg from0($raw$ lenThatIsAlsoEnd) {
		return new $typePrefix$SegFrom0(lenThatIsAlsoEnd);
	}
	default String toString_Seg() {
		return "beg:" + beg() + ", end:" + end() + ", len:" + len();
	}

	default boolean isPonctual() {
		return len() == 0;
	}
	default boolean contains($raw$ position) {
		return position >= beg()  &&  position < end();
	}
	default boolean contains($typePrefix$Seg other) {
		return other.beg() >= beg()  &&  other.end() <= end();
	}
	default boolean contains_strict($typePrefix$Seg other) {
		return this.beg() < other.beg()  &&  other.end() <  this.end();
	}
	default boolean isInside($typePrefix$Seg other) {
		return other.contains(this);
	}
	

	default boolean intersect($typePrefix$Seg s) {
		return this.contains(s.beg())  ||  this.contains(s.end());
	}
	
	default $typePrefix$Seg addLen($raw$ lenInc) {
		return new $typePrefix$Segment(this.beg(), len()+ lenInc);
	}
	default $typePrefix$Seg translate($raw$ delta) {
		return new $typePrefix$Segment(beg() + delta, len());
	}
	default $typePrefix$Seg withBeg($raw$ position) {
		return new $typePrefix$Segment(position, len());
	}
//	public default MutableSeg makeMutable() {
//		return new MutableSeg(this);
//	}

	//////////////////////////////////////////////////////////////
	///Geom interface:////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	
	//@sync absolute changed semantic from "len < 0 => len == 0" to "len < 0 => reverse bounds"
	//use "toIncRange" instead
//	public default $typePrefix$Seg absolute() {
//		if(end() < beg())
//			return new  $typePrefix$PointSeg(beg());
//		return this;
//	}
	
	default boolean isNegativeVector() {
		return len() <= 0;
	}
	default boolean isStrictNegativeVector() {
		return len() < 0;
	}
	default $typePrefix$Seg oppositeVect() {
		return new $typePrefix$Segment(beg(), -len());
	}

	
	public default Optional<$typePrefix$Seg> intersectionOpt($typePrefix$Seg other) {
		$raw$ b0 = beg();
		$raw$ b1 = other.beg();
		$raw$ e0 = end();
		$raw$ e1 = other.end();
		if(e0 <= b1  ||  e1 <= b0) 
			return Optional.empty();
		return Optional.of($typePrefix$Bounds.of(Math.max(b0, b1), Math.min(e0, e1)));
	}
	public default $typePrefix$Seg inter($typePrefix$Seg other) {
		$raw$ b0 = beg();
		$raw$ b1 = other.beg();
		$raw$ e0 = end();
		$raw$ e1 = other.end();
		return $typePrefix$Bounds.of(Math.max(b0, b1), Math.min(e0, e1));
	}
	public default $typePrefix$Seg enclosingBoth($typePrefix$Seg other) {
		return new $typePrefix$Bounds(Math.min(this.beg(), other.beg()), Math.max(this.end(), other.end()));
	}
	
//	public enum BiPresence {
//		c00, c01, c10, c11;
//	}
	public final static int BiPresence00 = 0b00,
			   BiPresence01 = 0b01,
			   BiPresence10 = 0b10,
			   BiPresence11 = 0b11;
//	@Getter 
//	@AllArgsConstructor(staticName = "of")
//	public static class $typePrefix$SegWithBiPresence {
//		$typePrefix$Seg seg;
//		int biPresence;
//	}
//	public default List<SegWithBiPresence> getSegWithBiPresenceList($typePrefix$Seg other){
//		List<SegWithBiPresence> rez;
//		if(this.getBeg() == other.getBeg()) {
//			rez = new ArrayList<>();
//			if(this.getEnd() == other.getEnd()) {
//				rez.add($typePrefix$SegWithBiPresence.of(this, BiPresence11));
//			} else if(this.getEnd() > other.getEnd()) {
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(getBeg(), other.getEnd()), BiPresence11));
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(other.getEnd(), getEnd()), BiPresence10));
//			} else {
//				rez.add($typePrefix$SegWithBiPresence.of(this, BiPresence11));
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(getEnd(), other.getEnd()), BiPresence10));
//			}
//		} else if(this.getBeg() < other.getBeg()){
//			rez = this.assumingThisBegInfOtherBeg(other, false);
//		} else {
//			rez = other.assumingThisBegInfOtherBeg(this, true);
//		}
//		return rez;
//	}
//	private List<SegWithBiPresence> assumingThisBegInfOtherBeg($typePrefix$Seg other, boolean swap) {
//		ArrayList<SegWithBiPresence> rez = new ArrayList<>();
//		int presence01 = swap ? BiPresence10 : BiPresence01;
//		int presence10 = swap ? BiPresence01 : BiPresence10;
//		if(this.getEnd() == other.getBeg()) {
//			rez.add($typePrefix$SegWithBiPresence.of(this, presence10));
//			rez.add($typePrefix$SegWithBiPresence.of(other, presence01));
//		} else if(this.getEnd() < other.getBeg()) {
//			rez.add($typePrefix$SegWithBiPresence.of(this, presence10));
//			rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(this.getEnd(), other.getBeg()), BiPresence00));
//			rez.add($typePrefix$SegWithBiPresence.of(other, presence01));
//		} else {
//			if(this.getEnd() == other.getEnd()) {
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(this.getBeg(), other.getBeg()), presence10));
//				rez.add($typePrefix$SegWithBiPresence.of(other, BiPresence11));
//			} else if(this.getEnd() > other.getEnd()) {
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(this.getBeg(), other.getBeg()), presence10));
//				rez.add($typePrefix$SegWithBiPresence.of(other, BiPresence11));
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(other.getEnd(), this.getEnd()), presence10));
//			} else {
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(this.getBeg(), other.getBeg()), presence10));
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(other.getBeg(), this.getEnd()), BiPresence11));
//				rez.add($typePrefix$SegWithBiPresence.of($typePrefix$Seg.withEnd(this.getEnd(), other.getEnd()), presence01));
//			}
//		}
//		return rez;
//	}
	@Getter 
	@AllArgsConstructor(staticName = "of")
	public static class Partitions {
		$raw$[] bounds;
		int [] presences;
	}
	public default Partitions getSegWithBiPresenceList2($typePrefix$Seg other){
		if(this.beg() == other.beg()) {
			if(this.end() == other.end()) {
				return Partitions.of(new $raw$[]{beg(), end()}, 
						               new int[]{BiPresence11});
			} else if(this.end() > other.end()) {
				return Partitions.of(new $raw$[]{beg(), other.end(), end()}, 
					              new int[]{     BiPresence11,   BiPresence10});
			} else {
				return Partitions.of(new $raw$[]{beg(), end(), other.end()}, 
				                      new int[]{BiPresence11,   BiPresence10});
			}
		} else if(this.beg() < other.beg()){
			return this.assumingThisBegInfOtherBeg2(other, false);
		} else {
			return other.assumingThisBegInfOtherBeg2(this, true);
		}
	}
	private Partitions assumingThisBegInfOtherBeg2($typePrefix$Seg other, boolean swap) {
		int presence01 = swap ? BiPresence10 : BiPresence01;
		int presence10 = swap ? BiPresence01 : BiPresence10;
		if(this.end() == other.beg()) {
			return Partitions.of(new $raw$[]{beg(), end(), other.end()}, 
                                       new int[]{presence10,   presence01});
		} else if(this.end() < other.beg()) {
			return Partitions.of(new $raw$[]{beg(), end(), other.beg(), other.end()}, 
                                      new int[]{presence10,   BiPresence00,    presence01});
		} else {
			if(this.end() == other.end()) {
				return Partitions.of(new $raw$[]{beg(), other.beg(), other.end()}, 
                                            new int[]{presence10,   BiPresence11});
			} else if(this.end() > other.end()) {
				return Partitions.of(new $raw$[]{beg(), other.beg(), other.end(), this.end()}, 
                                          new int[]{presence10,   BiPresence11, presence10});
			} else {
				return Partitions.of(new $raw$[]{beg(), other.beg(), this.end(), other.end()}, 
                                               new int[]{presence10,   BiPresence11, presence01});
			}
		}
	}
//	public default $typePrefix$Seg makeSegAtRightOfIntersection_algebraic($typePrefix$Seg other) {
//		$raw$ e0 = end();
//		$raw$ e1 = other.end();
//		return Geom.bounds(Math.min(e0, e1), Math.max(e0, e1));
//	}
//	public default $typePrefix$Seg makeSegAtLeftOfIntersection($typePrefix$Seg firstContent) {
//		$raw$ b0 = beg();
//		$raw$ b1 = firstContent.beg();
//		return Geom.bounds(Math.min(b0, b1), Math.max(b0, b1));
//	}
	
	
	
//	public default $raw$ absBeg() {
//		return Math.min(getBeg(), getEnd());
//	}
//	public default $raw$ absEnd() {
//		return Math.max(getBeg(), getEnd());
//	}

	$specificPart$
	
	
	
}
>>