delimiters "$", "$"

gen(common, type) ::= <<
package $common.packageName$;
import javax.annotation.processing.Generated;

import java.util.Arrays;
import java.util.List;

$type:{x | import org.gmart.util.functionalProg.javaPrimitives.To$x.nameBoxed$;}; separator="\n"$

@Generated("$common.generatorFQName$")
public class $common.typeNameOfFile$ {
	public static void main(String[] args) {
		int intArr[] = { 10, 20, 30 };
		System.out.println(Arrays.binarySearch(intArr, 5));
		System.out.println(Arrays.binarySearch(intArr, 10));
		System.out.println(Arrays.binarySearch(intArr, 15));
		System.out.println(Arrays.binarySearch(intArr, 21));
		System.out.println(Arrays.binarySearch(intArr, 30));
		System.out.println("////");
		test();
		double doubleArr[] = { 1, 2, 3 };
		System.out.println(Arrays.binarySearch(doubleArr, 0.5));
		System.out.println(Arrays.binarySearch(doubleArr, 1));
		System.out.println(Arrays.binarySearch(doubleArr, 1.5));
		System.out.println(Arrays.binarySearch(doubleArr, 3));
		System.out.println(Arrays.binarySearch(doubleArr, 3.5));
		int vfgg;
		//calculateEndBoundsOfConcatData(List.of("z", "z"), ToInteger.of(s->s.length()));
		
		//DoubleStream.iterate(0, t -> t < 4, t -> t+0.5).forEach(t -> System.out.println("t:" + t + "=>" + selectSequenceElem_binarySearch(t, doubleArr.length, doubleArr)));
	}
	private static void test() {
		int intArr[] = { 10, 20, 30 };
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, -5) == 0;
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, 5) == 0;
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, 10) == 1;
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, 11) == 1;
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, 20) == 2;
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, 35) == 3;
		assert searchIndexOfObjectWithEndBoundsAtPosition(intArr, 1000) == 3;
	}
	$type:decl(); separator="\n"$
}
>>

decl(type) ::= <<
public static <T> $type.name$[] calculateEndBoundsOfConcatData(List<T> lenghtyElems, To$type.nameBoxed$<T> lenghtGetter) {
	$type.name$[] bounds = new $type.name$[lenghtyElems.size()];
	int curBound = 0;
	for(int i = 0; i < lenghtyElems.size(); i++) {
		curBound += lenghtGetter.apply(lenghtyElems.get(i));
		bounds[i] = curBound;
	}
	return bounds;
}

public static int searchIndexOfObjectWithEndBoundsAtPosition($type.name$[] bounds, $type.name$ position) {
	if(bounds.length < 5) {
		for(int i = 0; i < bounds.length; i++) {
			if(position < bounds[i])
				return i;
		}
		return bounds.length;
	} else {
		int rez = Arrays.binarySearch(bounds, position);
		if(rez >= 0) {
			return rez+1;
		} else {
			return -rez-1;
		}			
	}
}
>>
