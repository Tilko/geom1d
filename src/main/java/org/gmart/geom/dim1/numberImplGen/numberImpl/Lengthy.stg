delimiters "$", "$"


fileGen(common, boxed, raw, capRaw, typePrefix, specificPart, speImports) ::= <<

/*******************************************************************************
 * Copyright 2020 GrÃ©goire Martinetti
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package $common.packageName$;
import javax.annotation.processing.Generated;

import org.gmart.functional.javaPrimitives.To$boxed$;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
import java.util.stream.Stream.Builder;

import api_global.geom.dim1.$raw$Impl.seg.$typePrefix$Seg;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$Bounds;
import api_global.geom.dim1.$raw$Impl.seg.impls.$typePrefix$SegFrom0;

/**
 * 1D equivalent to 2D Spanned interface
 * @author marti
 * 
 */
@Generated("$common.generatorFQName$")
public interface $typePrefix$Lengthy {
	$raw$ len();
	
	default $typePrefix$Seg universeTail($raw$ posInIntercalated) {
		return new $typePrefix$Bounds(posInIntercalated, len());
	}
	
	default $typePrefix$Seg[] universeSplit($raw$ splitingPosition) {
		return universeSplit(len(), splitingPosition);
	}
	public static $typePrefix$Seg[] universeSplit($raw$ totalSize, $raw$ splitingPosition) {
		return new $typePrefix$Seg[] {new $typePrefix$SegFrom0(splitingPosition), new $typePrefix$Bounds(splitingPosition, totalSize)};
	}
	
	default <T extends $typePrefix$Lengthy> Stream<$typePrefix$Seg> universeRangeComplement($typePrefix$Seg directedRange_directionDoesntMatter) {
		$typePrefix$Seg inputRange = directedRange_directionDoesntMatter.toAbsoluteSegment();
		$raw$ beg = inputRange.beg();
		Builder<$typePrefix$Seg> builder = Stream.builder();
		if(beg > 0)
			builder.add(new $typePrefix$SegFrom0(beg));
		
		$raw$ universeLen = len();
		$raw$ end = inputRange.end();
		if(end < universeLen)
			builder.add(new $typePrefix$Bounds(end, universeLen));
		return builder.build();
	}
	
	
	public static $raw$[] calculateEndBoundsOfConcatData($raw$[] length) {
		$raw$[] bounds = new $raw$[length.length];
		$raw$ curBound = 0;
		for(int i = 0; i < length.length; i++) {
			curBound +=length[i];
			bounds[i] = curBound;
		}
		return bounds;
	}
	public static <T extends $typePrefix$Lengthy> $raw$[] calculateEndBoundsOfConcatData(List<T> lenghtyElems) {
		$raw$[] bounds = new $raw$[lenghtyElems.size()];
		$raw$ curBound = 0;
		for(int i = 0; i < lenghtyElems.size(); i++) {
			curBound += lenghtyElems.get(i).len();
			bounds[i] = curBound;
		}
		return bounds;
	}
	public static <T> $raw$[] calculateEndBoundsOfConcatData(List<T> lenghtyElems, To$boxed$<T> lenghtGetter) {
		$raw$[] bounds = new $raw$[lenghtyElems.size()];
		$raw$ curBound = 0;
		for(int i = 0; i < lenghtyElems.size(); i++) {
			curBound += lenghtGetter.apply(lenghtyElems.get(i));
			bounds[i] = curBound;
		}
		return bounds;
	}

	public static int searchIndexOfObjectWithEndBoundsAtPosition($raw$[] bounds, $raw$ position) {
		if(bounds.length < 5) {
			for(int i = 0; i < bounds.length; i++) {
				if(position < bounds[i])
					return i;
			}
			return bounds.length;
		} else {
			int rez = Arrays.binarySearch(bounds, position);
			if(rez >= 0) {
				return rez+1;
			} else {
				return -rez-1;
			}			
		}
	}
	
}

	
	
>>